@page "/login"
@namespace AttendanceTrackerFrontend.Pages
@using AttendanceTrackerFrontend.DTO
@using AttendanceTrackerFrontend.Services
@inject AuthService AuthService
@inject NavigationManager Navigation

<h3>Login</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}

<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" FormName="LoginForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Email:</label>
        <InputText id="email"
                   @bind-Value="@loginModel.Email"
                   @bind-Value:event="oninput"
                   class="form-control" />
    </div>

    <div class="mb-3">
        <label>Password:</label>
        <InputText id="password"
                   type="password"
                   @bind-Value="@loginModel.Password"
                   @bind-Value:event="oninput"
                   class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private LoginDto loginModel = new LoginDto { Email = "janchesterperen@gmail.com", Password = "Chester@123" };
    private string errorMessage = "";
    private bool _isInitialized = false; // Track component initialization

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isInitialized = true;
            StateHasChanged(); // Ensure UI updates
        }
    }

    private async Task HandleLogin()
    {
        // Remove the initialization check temporarily
        errorMessage = "";

        Console.WriteLine($"Email: {loginModel.Email}");
        Console.WriteLine($"Password: {loginModel.Password}");

        if (string.IsNullOrWhiteSpace(loginModel.Email) || string.IsNullOrWhiteSpace(loginModel.Password))
        {
            errorMessage = "Email and Password are required.";
            return;
        }

        try
        {
            var success = await AuthService.Login(loginModel);
            if (success)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login. Please try again.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
    }
}